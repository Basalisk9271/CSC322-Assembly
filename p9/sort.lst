     1                                  ; Gabe Imlay
     2                                  ; CSC322 <12/02/22>
     3                                  ; Project 9: Sort Array
     4                                  ; This project will sort the contents of an array from the data section 
     5                                  ; of the program before printing it out in the sorted order. 
     6                                  
     7                                  ;https://www.youtube.com/watch?v=0H6i6_Cqlfw&ab_channel=MalikShahzaibOfficial 
     8                                  
     9                                  %macro PrintIt 2
    10                                  	pusha
    11                                  	mov eax, 4
    12                                  	mov ebx, 1
    13                                  	mov ecx, %1
    14                                  	mov edx, %2
    15                                  	int 80h 
    16                                  	popa
    17                                  %endmacro
    18                                  
    19                                  ; address of the array, size of the array
    20                                  SECTION .data
    21 00000000 C8002C010000FFFF00-     nums:	dw	 200, 300, 0, 65535, 0, 1, 65534, 300, 100
    22 00000009 000100FEFF2C016400 
    23                                  numslen:	EQU	($-nums)
    24 00000012 20202020200A            outputfield: db "     ", 10 ; This is the size of the outputs
    25 00000018 4F726967696E616C20-     origStr: dw "Original Array:", 10
    26 00000021 41727261793A000A00 
    27                                  origStrLen EQU	($-origStr)
    28 0000002A 536F72746564204172-     sortStr: dw "Sorted Array:", 10
    29 00000033 7261793A000A00     
    30                                  sortStrLen EQU	($-sortStr)
    31 0000003A 0A00                    ten: dw 10
    32 0000003C 0A                      newline:	db 10
    33                                  ; Clear Screen control characters
    34 0000003D 1B5B324A                cls:      db      1bh, '[2J'
    35                                  clsSize:  EQU  $-cls
    36                                  
    37                                  SECTION .bss
    38                                  
    39                                  SECTION .text
    40                                  global _main
    41                                  _main:
    42                                  
    43                                  ; put your code here.
    44                                  
    45                                  PrintIt cls, clsSize
    46 00000000 60                  <1>  pusha
    47 00000001 B804000000          <1>  mov eax, 4
    48 00000006 BB01000000          <1>  mov ebx, 1
    49 0000000B B9[3D000000]        <1>  mov ecx, %1
    50 00000010 BA04000000          <1>  mov edx, %2
    51 00000015 CD80                <1>  int 80h
    52 00000017 61                  <1>  popa
    53                                  
    54                                  PrintIt origStr, origStrLen
    55 00000018 60                  <1>  pusha
    56 00000019 B804000000          <1>  mov eax, 4
    57 0000001E BB01000000          <1>  mov ebx, 1
    58 00000023 B9[18000000]        <1>  mov ecx, %1
    59 00000028 BA12000000          <1>  mov edx, %2
    60 0000002D CD80                <1>  int 80h
    61 0000002F 61                  <1>  popa
    62 00000030 B909000000              mov ecx, numslen/2
    63 00000035 BB[00000000]            mov ebx, nums
    64 0000003A E885000000              call printTop
    65                                  
    66 0000003F B912000000              mov ecx, numslen
    67 00000044 BB[00000000]            mov ebx, nums
    68 00000049 E84B000000              call bubblesort
    69                                  
    70                                  PrintIt newline, 1
    71 0000004E 60                  <1>  pusha
    72 0000004F B804000000          <1>  mov eax, 4
    73 00000054 BB01000000          <1>  mov ebx, 1
    74 00000059 B9[3C000000]        <1>  mov ecx, %1
    75 0000005E BA01000000          <1>  mov edx, %2
    76 00000063 CD80                <1>  int 80h
    77 00000065 61                  <1>  popa
    78                                  
    79                                  PrintIt sortStr, sortStrLen
    80 00000066 60                  <1>  pusha
    81 00000067 B804000000          <1>  mov eax, 4
    82 0000006C BB01000000          <1>  mov ebx, 1
    83 00000071 B9[2A000000]        <1>  mov ecx, %1
    84 00000076 BA10000000          <1>  mov edx, %2
    85 0000007B CD80                <1>  int 80h
    86 0000007D 61                  <1>  popa
    87 0000007E B909000000              mov ecx, numslen/2
    88 00000083 BB[00000000]            mov ebx, nums
    89 00000088 E837000000              call printTop
    90                                  
    91                                  lastBreak:
    92                                  
    93                                  ; Normal termination code
    94 0000008D B801000000              mov eax, 1
    95 00000092 BB00000000              mov ebx, 0
    96 00000097 CD80                    int 80h
    97                                  
    98                                  
    99                                  ;mov length into ecx before calling and the array address into ebx
   100                                  bubblesort:
   101 00000099 60                      pusha 
   102 0000009A D1E9                    shr ecx, 1							; divide the ecx (holding array length) by 2
   103                                  start:
   104 0000009C 31C0                    	xor eax, eax					; zero out the eax register used for the array offset
   105                                  	comparison:
   106 0000009E 668B1443                		mov dx, [ebx+eax*2]			; move the first item into the dx register to compare
   107 000000A2 663B544302              		cmp dx, [ebx+eax*2+2]		; compare the value in dex to the next value in the array
   108 000000A7 7211                    		jb noswap					; if the value in dx is less than the next value, they do not need to be switched, jump to noswap
   109                                  		; swap
   110 000000A9 6687544302              		xchg dx, word[ebx+eax*2+2]	; exchange the first item (greater item) with the second item (lesser item)
   111 000000AE 66891443                		mov word[ebx+eax*2], dx		; move the saved item (lesser item) into the first slot
   112 000000B2 40                      		inc eax						; increment offset
   113 000000B3 83F808                  		cmp eax, numslen/2-1		; check to see if offset is greater than the length of the array
   114 000000B6 75E6                    		jne comparison				; if the offset does not 
   115 000000B8 E2E2                    		loop start					; loop to the start since the entire array has been iterated
   116                                  	noswap:
   117 000000BA 40                            		inc eax					; increment offset
   118 000000BB 83F808                        		cmp eax, numslen/2-1	; check to see if offset is greater than the length of the array
   119 000000BE 75DE                          		jne comparison			; if the offset does not 
   120 000000C0 E2DA                          		loop start				; loop to the start since the entire array has been iterated
   121 000000C2 61                      popa
   122 000000C3 C3                      ret
   123                                  
   124                                  ; length of array in ecx, array pointer in ebx
   125                                  printTop:
   126 000000C4 668B03                  	mov ax, [ebx]
   127 000000C7 E806000000              	call _convert
   128 000000CC 83C302                  	add ebx, 2
   129 000000CF E2F3                    	loop printTop
   130                                  
   131 000000D1 C3                      	ret
   132                                  
   133                                  _convert:
   134 000000D2 60                      	pusha
   135                                  
   136 000000D3 BB[12000000]            	mov ebx, outputfield
   137 000000D8 83C304                  	add ebx, 4
   138 000000DB B905000000              	mov ecx, 5
   139                                  
   140                                  	fivetimes:
   141 000000E0 6631D2                  		xor dx, dx
   142 000000E3 66F735[3A000000]        		div word[ten]
   143 000000EA 80C230                  		add dl, '0'
   144 000000ED 8813                    		mov [ebx], dl
   145 000000EF 4B                      		dec ebx
   146 000000F0 E2EE                    		loop fivetimes
   147                                  
   148                                  	PrintIt outputfield, 6
   149 000000F2 60                  <1>  pusha
   150 000000F3 B804000000          <1>  mov eax, 4
   151 000000F8 BB01000000          <1>  mov ebx, 1
   152 000000FD B9[12000000]        <1>  mov ecx, %1
   153 00000102 BA06000000          <1>  mov edx, %2
   154 00000107 CD80                <1>  int 80h
   155 00000109 61                  <1>  popa
   156 0000010A 61                      	popa 
   157 0000010B C3                      	ret
