     1                                  ; Bob Allen
     2                                  ; Demonstrate PUSH for nesting loops
     3                                  ; Fall 2022
     4                                  
     5                                  SECTION .data
     6                                  ; define data/variables here.  Think DB, DW, DD, DQ
     7 00000000 05000000                a:	dd	5
     8 00000004 06000000                b:	dd	6
     9 00000008 07000000                c:	dd	7
    10                                  
    11                                  
    12                                  SECTION .bss
    13                                  ; define uninitialized data here
    14 00000000 <res 00000004>          prod:	RESD 1
    15                                  
    16                                  SECTION .text
    17                                  global _main
    18                                  _main:
    19                                  
    20                                  
    21                                  ; Nesting three loops
    22 00000000 31C0                    	xor	eax,eax		; zero out ax to accumulate the product
    23 00000002 8B0D[00000000]          	mov	ecx,[a]		; loop "a" times
    24                                  aTop:
    25 00000008 51                      	push	ecx		; save a's ecx value on the stack
    26 00000009 8B0D[04000000]          	mov 	ecx,[b]		; loop "b" times
    27                                  bTop:
    28 0000000F 51                      	push	ecx		; save b's ecx value on the stack
    29 00000010 8B0D[08000000]          	mov	ecx,[c]		; loop "c" times
    30                                  cTop:
    31 00000016 40                      	inc	eax		; innermost nesting is where we'll inc ax 
    32 00000017 E2FD                    	loop	cTop
    33                                  
    34 00000019 59                      	pop	ecx		; restore b's ecx value from the stack
    35 0000001A E2F3                    	loop	bTop
    36                                  
    37 0000001C 59                      	pop	ecx		; restore a's ecx value from the stack
    38 0000001D E2E9                    	loop	aTop
    39                                  
    40 0000001F A3[00000000]            	mov	[prod],eax	; save the "product" in ram
    41                                  
    42                                  lastBreak:
    43                                  
    44                                  ; Normal termination code
    45 00000024 B801000000              mov eax, 1
    46 00000029 BB00000000              mov ebx, 0
    47 0000002E CD80                    int 80h
